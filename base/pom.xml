<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion> 
  <parent>
    <groupId>com.fasterxml.jackson</groupId>
    <artifactId>jackson-bom</artifactId>
    <version>3.0.0-SNAPSHOT</version>
  </parent>
  <artifactId>jackson-base</artifactId>
  <name>Jackson Base</name>
  <packaging>pom</packaging>
  <description>Parent pom for components of Jackson dataprocessor: includes base settings as well
as consistent set of dependencies across components. NOTE: NOT to be used by components outside
of Jackson: application code should only rely on `jackson-bom`
  </description>
  <licenses>
    <license>
      <name>The Apache Software License, Version 2.0</name>
      <url>http://www.apache.org/licenses/LICENSE-2.0.txt</url>
      <distribution>repo</distribution>
    </license>
  </licenses>
  <properties>
    <!--
     | For automatically generating PackageVersion.java. Your child pom.xml must define
     | packageVersion.dir and packageVersion.package, and must set the phase of the
     | process-packageVersion execution of maven-replacer-plugin to 'generate-sources'.
    -->
    <packageVersion.template.input>${basedir}/src/main/java/${packageVersion.dir}/PackageVersion.java.in</packageVersion.template.input>
    <packageVersion.template.output>${generatedSourcesDir}/${packageVersion.dir}/PackageVersion.java</packageVersion.template.output>

    <!-- 09-Sep-2017, tatu: Jackson 3.x is Java 8 and above only. While it would be possible
         to support earlier versions for some components (annotations, core streaming),
         this is one simplification we can do
    -->
    <javac.src.version>1.8</javac.src.version>
    <javac.target.version>1.8</javac.target.version>
    <javac.debuglevel>lines,source,vars</javac.debuglevel>

    <version.junit>4.12</version.junit>

    <maven.compiler.source>${javac.src.version}</maven.compiler.source>
    <maven.compiler.target>${javac.target.version}</maven.compiler.target>

    <moditect.sourceGroup>${project.groupId}</moditect.sourceGroup>
    <moditect.sourceArtifact>${project.artifactId}</moditect.sourceArtifact>
    <moditect.sourceVersion>${project.version}</moditect.sourceVersion>
  </properties>

  <dependencies>
    <dependency> <!-- all components use junit for testing -->
      <groupId>junit</groupId>
      <artifactId>junit</artifactId>
      <version>${version.junit}</version>
      <scope>test</scope>
    </dependency>
  </dependencies>

  <build>
    <pluginManagement>
      <plugins>

        <!-- Verify existence of certain settings
          -->
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-enforcer-plugin</artifactId>
          <executions>
            <execution>
              <id>enforce-java</id>
              <phase>validate</phase>
              <goals>
		<goal>enforce</goal>
              </goals>
              <configuration>
              <rules>
                <requireJavaVersion>
                  <version>1.8.0</version>
                </requireJavaVersion>
                <requireMavenVersion>
                  <version>[3.3,)</version>
                  <message>[ERROR] The currently supported version of Maven is 3.3 or higher</message>
                </requireMavenVersion>
                <requirePluginVersions>
                  <banLatest>true</banLatest>
                  <banRelease>true</banRelease>
                  <banSnapshots>true</banSnapshots>
                  <phases>clean,deploy,site</phases>
                  <message>[ERROR] Best Practice is to always define plugin versions!</message>
                </requirePluginVersions>
	      </rules>
	      </configuration>
	    </execution>
            <execution>
              <id>enforce-properties</id>
              <phase>validate</phase>

<!-- important! Do NOT enable here since parent does not define, build would fail
    BUT: alas means child has specify settings for phase AND goals like so:
              <phase>validate</phase>
              <goals>
		<goal>enforce</goal>
              </goals>
-->
              <configuration>
		<rules>
                  <!-- Needed both for Replacer plug-in AND for Automatic Module Name -->
                  <requireProperty>
                    <property>packageVersion.package</property>
                  </requireProperty>
                  <requireProperty>
                    <property>packageVersion.dir</property>
                  </requireProperty>
		</rules>
              </configuration>
            </execution>
          </executions>
	</plugin>

	<plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-javadoc-plugin</artifactId>
          <version>${version.plugin.javadoc}</version>
          <configuration>
<!-- Disable Java 8 javadoc warnings -->
            <additionalparam>-Xdoclint:none</additionalparam>
            <failOnError>false</failOnError>
            <links>
              <link>https://docs.oracle.com/en/java/javase/11/docs/api</link>
            </links>
          </configuration>
	</plugin>

        <!-- Set up replacer but do not invoke (it's pom, after all);
             however, phase etc are all defined.
          -->
	<plugin>
          <groupId>com.google.code.maven-replacer-plugin</groupId>
          <artifactId>replacer</artifactId>
          <executions>
            <execution>
              <id>process-packageVersion</id>
              <goals>
                <goal>replace</goal>
              </goals>
              <phase>generate-sources</phase>
            </execution>
          </executions>
          <configuration>
            <file>${packageVersion.template.input}</file>
            <outputFile>${packageVersion.template.output}</outputFile>
            <replacements>
              <replacement>
                <token>@package@</token>
                <value>${packageVersion.package}</value>
              </replacement>
              <replacement>
                <token>@projectversion@</token>
                <value>${project.version}</value>
              </replacement>
              <replacement>
                <token>@projectgroupid@</token>
                <value>${project.groupId}</value>
              </replacement>
              <replacement>
                <token>@projectartifactid@</token>
                <value>${project.artifactId}</value>
              </replacement>
            </replacements>
          </configuration>
	</plugin>

        <plugin>
          <groupId>org.moditect</groupId>
          <artifactId>moditect-maven-plugin</artifactId>
          <executions>
            <execution>
              <id>add-module-infos</id>
              <phase>package</phase>
              <goals>
                <goal>add-module-info</goal>
              </goals>
              <configuration>
                <overwriteExistingFiles>true</overwriteExistingFiles>
                <module>
                  <moduleInfoFile>src/moditect/module-info.java</moduleInfoFile>
                </module>
              </configuration>
            </execution>
          </executions>
        </plugin>

        <!-- 19-Sep-2017, tatu: Or, if Cobertura fails with Java 8....
          -->
	<plugin>
	  <groupId>org.jacoco</groupId>
	  <artifactId>jacoco-maven-plugin</artifactId>
	  <version>0.7.9</version>
	  <executions>
            <execution>
              <goals>
                <goal>prepare-agent</goal>
              </goals>
            </execution>
	    <execution>
              <id>report</id>
              <phase>prepare-package</phase>
              <goals>
                <goal>report</goal>
              </goals>
            </execution>
	  </executions>
	</plugin>

	<plugin>
          <!-- Work around Eclipse incompatibility (http://code.google.com/p/maven-replacer-plugin/issues/de\
tail?id=66) -->
          <groupId>org.eclipse.m2e</groupId>
          <artifactId>lifecycle-mapping</artifactId>
          <version>1.0.0</version>
          <configuration>
            <lifecycleMappingMetadata>
              <pluginExecutions>
                <pluginExecution>
                  <pluginExecutionFilter>
                    <groupId>com.google.code.maven-replacer-plugin</groupId>
                    <artifactId>replacer</artifactId>
                    <versionRange>[${version.plugin.replacer},)</versionRange>
                    <goals>
                      <goal>replace</goal>
                    </goals>
                  </pluginExecutionFilter>
                  <action>
                    <execute>
                      <runOnIncremental>false</runOnIncremental>
                    </execute>
                  </action>
                </pluginExecution>
              </pluginExecutions>
            </lifecycleMappingMetadata>
          </configuration>
        </plugin>
      </plugins>
    </pluginManagement>

    <plugins>
       <!-- 12-Oct-2019, tatu: Copied from
            https://github.com/stephenc/git-timestamp-maven-plugin/blob/master/pom.xml#L327-L337
         -->
       <plugin>
         <groupId>org.sonatype.plugins</groupId>
         <artifactId>nexus-staging-maven-plugin</artifactId>
         <version>1.6.6</version>
         <extensions>true</extensions>
         <configuration>
           <serverId>sonatype-nexus-staging</serverId>
           <nexusUrl>https://oss.sonatype.org/</nexusUrl>
           <stagingProfileId>b34f19b9cc6224</stagingProfileId>
         </configuration>
       </plugin>
    </plugins>
  </build>

  <!-- 08-Mar-2019, tatu: Add option to generate `module-info.java` with Moditect
        under profile `moditect`
    -->
  <profiles>
    <profile>
      <id>moditect</id>
      <properties>
        <!-- Not only do we need JDK 9+, must target later JDK too -->
        <java.version>1.9</java.version>
        <javac.src.version>${java.version}</javac.src.version>
        <javac.target.version>${java.version}</javac.target.version>
      </properties>
      <build>
        <plugins>
          <plugin>
            <groupId>org.moditect</groupId>
            <artifactId>moditect-maven-plugin</artifactId>
            <executions>
              <execution>
                <id>generate-module-info</id>
                <phase>generate-sources</phase>
                <goals>
                  <goal>generate-module-info</goal>
                </goals>
                <configuration>
                  <modules>
                    <module>
                      <artifact>
                        <groupId>${moditect.sourceGroup}</groupId>
                        <artifactId>${moditect.sourceArtifact}</artifactId>
                        <version>${moditect.sourceVersion}</version>
                      </artifact>
                    </module>
                  </modules>
                </configuration>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
    </profile>
  </profiles>
</project>
